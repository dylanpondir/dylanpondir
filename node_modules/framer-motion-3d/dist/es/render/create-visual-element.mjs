import { __rest } from 'tslib';
import { visualElement, checkTargetForNewValues, createBox } from 'framer-motion';
import { setThreeValue } from './utils/set-value.mjs';
import { readThreeValue } from './utils/read-value.mjs';
import { scrapeMotionValuesFromProps } from './utils/scrape-motion-value.mjs';

const createRenderState = () => ({});
const threeVisualElement = visualElement({
    treeType: "three",
    readValueFromInstance: readThreeValue,
    getBaseTarget() {
        return undefined;
    },
    sortNodePosition(a, b) {
        return a.id - b.id;
    },
    makeTargetAnimatable(element, _a) {
        var target = __rest(_a, ["transition"]);
        checkTargetForNewValues(element, target, {});
        return target;
    },
    restoreTransform() { },
    resetTransform() { },
    removeValueFromRenderState(_key, _renderState) { },
    measureViewportBox: createBox,
    scrapeMotionValuesFromProps,
    build(_element, state, latestValues) {
        for (const key in latestValues) {
            state[key] = latestValues[key];
        }
    },
    render(instance, renderState) {
        for (const key in renderState) {
            setThreeValue(instance, key, renderState);
        }
    },
});
const createVisualElement = (_, options) => threeVisualElement(options);

export { createRenderState, createVisualElement, threeVisualElement };
